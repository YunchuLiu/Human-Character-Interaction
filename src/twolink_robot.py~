#!/usr/bin/env python
import rospy
import roslib
roslib.load_manifest('twolink_planar_robot')
import math
import tf 
import time
from std_msgs.msg import String
from sensor_msgs.msg import JointState
import geometry_msgs.msg
from geometry_msgs.msg import Point
from geometry_msgs.msg import Quaternion


def transfer():

    #publish sensor messages
    
    #pub=rospy.Publisher('joint_states',JointState, queue_size=10)
    
    orm_mv=rospy.Publisher('orm_mv',geometry_msgs.msg.Transform,queue_size=1)
    
    br = tf.TransformBroadcaster()
    
    rospy.sleep(5.)
    
    rate = rospy.Rate(10.0)
    
    base_time=rospy.Time.now().to_sec()
    
    rospy.set_param('~Fre',50)
    rate=rospy.Rate(rospy.get_param('~Fre'))
    
    while not rospy.is_shutdown(): 
        
        now = rospy.Time.now()
        listener.waitForTransform("/camera_link", "/camera_depth_frame", now, rospy.Duration(4.0))
        (trans,rot)=listener.lookupTransform('/camera_link', '/camera_depth_frame', now)
        
            
        #rospy.set_param('~T', 5)
        #T=rospy.get_param('~T')
        t=rospy.Time.now().to_sec() - base_time
        
        #x=trans.x
        #y=trans.y 
        #r=math.sqrt(x**2+y**2)
        cmd=geometry_msgs.msg.Transform()
        cmd.translation=trans
        cmd.rotation=rot
        orm_mv.publish(cmd)
        
        
        #msg=JointState()
        #msg.name=["joint1","joint2","joint3"]
        #msg.position=[math.atan2(y,x)-math.acos(0.5*r),math.pi-math.acos((2-r**2)/2),0.0]
        #pub.publish(msg)
    
        #tf broadcaster
        br.sendTransform((0, 0, 0),
                      (0,0,0,1),
                      rospy.Time.now(),
                      "link1",
                      "base_link")
        br.sendTransform(trans,
                      rot,
                      rospy.Time.now(),
                      "link2",
                      "link1")
        br.sendTransform((1, 0, 0),
                     (0,0,0,1),
                      rospy.Time.now(),
                      "end_effector",
                      "link2")
        rate.sleep()
        

if __name__=='__main__':
    try:
        rospy.init_node('twolink_planar_robot', anonymous=False)
        
        
        listener = tf.TransformListener()
        rospy.sleep(5.)
        
        transfer()
            
    except rospy.ROSInterruptException:
        pass 
