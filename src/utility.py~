#!/usr/bin/python

import numpy as np
import rospy
import roslib
import tf 
from tf import transformations as tr
from geometry_msgs.msg import Transform

trans_data=Transform()

#filter parameters 
gamma = 0.01
alpha_low=0.01
alpha_high=0.35
v_low=0.008
v_high=0.01

#define dictionary to store previous filtered output and para
prev_bn= {}
prev_val = {}

#get the last ten skeleton data and return the tran after fitering 
def get_trans(frame_1,now,frame_2,duration,listener): 
    
    global prev_val
    global prev_bn 
    
    trans_list_x=[]
    trans_list_y=[]
    trans_list_z=[]
    
    listener.waitForTransform(frame_1,frame_2,now,duration)
    (trans,rot)=listener.lookupTransform(frame_1,frame_2,now)
    
    if len(trans_list_x) > 10:
      trans_list_x.pop(0)
    trans_list_x.append(list(trans)[0])
    if len(trans_list_y) > 10 :
      trans_list_y.pop(0)
    trans_list_y.append(list(trans)[1])
    if len(trans_list_z) > 10:
      trans_list_z.pop(0)
    trans_list_z.append(list(trans)[2])
    
    
    reset_filter(frame_1+frame_2+'x')
    reset_filter(frame_1+frame_2+'y')
    reset_filter(frame_1+frame_2+'z')
     
    f_x,x_bn=double_expo_smooth(frame_1+frame_2+'x', trans_list_x)
    f_y,y_bn=double_expo_smooth(frame_1+frame_2+'y', trans_list_y)
    f_z,z_bn=double_expo_smooth(frame_1+frame_2+'z', trans_list_z)
    
    prev_val[frame_1+frame_2+'x']=f_x
    prev_val[frame_1+frame_2+'y']=f_y
    prev_val[frame_1+frame_2+'z']=f_z
    prev_bn[frame_1+frame_2+'x']=x_bn
    prev_bn[frame_1+frame_2+'y']=y_bn
    prev_bn[frame_1+frame_2+'z']=z_bn
    
    return [f_x,f_y,f_z]
    

#fitering     
def double_expo_smooth(frames,val_list):
    
    local_prev_val=prev_val[frames]
    local_prev_bn=prev_bn[frames]
    
    vn=np.abs(local_prev_val-val_list[-1])

    if vn < v_low:
        alpha = alpha_low
    elif v_low <= vn <= v_high:
        alpha = alpha_high + (vn-v_high)*(alpha_low-alpha_high)/(v_low-v_high)
              
    elif vn > v_high:
        alpha = alpha_high
    else:
        alpha = (a_high+a_low)/2.0
    
    val = alpha*val_list[-1]+ (1-alpha)*(local_prev_val+local_prev_bn)
    bn = gamma*(val_list[-1]-local_prev_val)+(1-gamma)*local_prev_bn   
    
    return val,bn 
    
def reset_filter(frames):
    
    global prev_val
    global prev_bn 
    
    prev_val[frames]=0.0
    prev_bn[frames]=0.0 

def get_theta(vec_a,vec_b):    

    length_a=np.sqrt(vec_a[0]**2+vec_a[1]**2+vec_a[2]**2)
    length_b=np.sqrt(vec_b[0]**2+vec_b[1]**2+vec_b[2]**2)
    dotproduct=vec_a[0]*vec_b[0]+vec_a[1]*vec_b[1]+vec_a[2]*vec_b[2]
    
    value=dotproduct/length_a/length_b
    if value > 1:
        value = 1
    if value < -1:
        value = -1 
    theta=np.arccos(value)
    
    return theta 
    
def get_euler_from_spherical(R):
    joints=tr.euler_from_quaternion(R,'rzxy')
    return joints 
    



    

    
    
    
