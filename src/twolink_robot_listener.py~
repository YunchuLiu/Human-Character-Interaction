#!/usr/bin/env python
import rospy
import roslib 
roslib.load_manifest('twolink_planar_robot')
import math
import tf 
import time
from std_msgs.msg import String
from sensor_msgs.msg import JointState
from tf.transformations import euler_from_quaternion
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray


def animate():

    #publish Marker messages
    
    pub=rospy.Publisher('/visualization_marker_array', MarkerArray, queue_size=100)
    rate=rospy.Rate(20)
    msgArray=MarkerArray()
    
    count=0
    MARKERS_MAX=80
    
    
    listener.waitForTransform('base_link', 'end_effector', rospy.Time(0), rospy.Duration(1.0))
    while not rospy.is_shutdown(): 
        #try:
            (trans,rot) = listener.lookupTransform('base_link', 'end_effector', rospy.Time(0))
            print trans
            msg=Marker()
            msg.header.frame_id="base_link"
            msg.header.stamp=rospy.Time.now()
            msg.action = msg.ADD
            msg.type=msg.SPHERE
            msg.pose.position.x = trans[0]
            msg.pose.position.y = trans[1]
            msg.pose.position.z = trans[2]
            msg.pose.orientation.x = rot[0]
            msg.pose.orientation.y = rot[1]
            msg.pose.orientation.z = rot[2]
            msg.pose.orientation.w = rot[3]
            msg.color.r= 0.0
            msg.color.g= 1.0
            msg.color.b= 0.0
            msg.color.a = 1.0
            msg.scale.x = 0.01
            msg.scale.y = 0.01
            msg.scale.z = 0.01
            
        
            count += 1    
        
            msgArray.markers.append(msg)
        
            id = 0
            for m in msgArray.markers:
                m.id = id
                id += 1
        
            if(count > MARKERS_MAX):
                msgArray.markers.pop(0)
        
           

            pub.publish(msgArray)
            print msgArray
            rate.sleep()
            
        #except (tf.LookupException, tf.ConnectivityException):
            #continue
        
if __name__=='__main__':
    try:
        rospy.init_node('twolink_planar_robot_listener', anonymous=False)
        
        listener = tf.TransformListener()
        
        animate()
            
    except rospy.ROSInterruptException:
        pass 
